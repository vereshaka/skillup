/*
Jenkinsfile for building of HFHS widgets release versions.

Build starts manually.
*/


def JENKIN_GIT_CREDENTIALS_ID = "8c90ce01-4736-4b5a-8661-ab6299330151"
def JENKIN_K8S_CREDENTIALS_ID = 'kubernetes-gucci-dev'
def INFORM_ABOUT_FAILURE = 'grp.hfhs@sytoss.com'
def JENKINS_NODE_JS_INSTALLATION_LABEL = 'node10.16.3'

def proposal_version = ""
def overview = "Version proposal"
def ver_list = ""
def base_ver = ""
def base_build = null
def sanity_test_job_name = "hfhs-release-sanity-test"

/* 
Variable 'projects' contains list of widgets that can be released.
*/

def projects = [
    "microfrontend-hfhs-processing" : "",
    "microfrontend-hfhs-changeownership" : "",
    "microfrontend-hfhs-product-details" : "",
    "microfrontend-hfhs-base" : "",
    "microfrontend-hfhs-connector" : "",
    "microfrontend-hfhs-business-transaction-detail" : "",
    "microfrontend-hfhs-business-transaction-history" : "",
    "microfrontend-hfhs-toolbar" : "",
    "microfrontend-hfhs-product-move" : "",
    "microfrontend-hfhs-search-product" : "",
];

Boolean isReleaseNeeded(String packageVersion){
    String prerelease_regex = /\d+\.{1}\d+\.{1}\d+\-.*/
    if ((packageVersion ==~ prerelease_regex) || (packageVersion == "" )) return true
    else return false
}

String Conclusion(String ver){
    if (isReleaseNeeded(ver) == true ) return """Release needed ( ${ver} )"""
    else return """Release NOT needed ( ${ver} )"""
}

String ComponentVersion(String name, String version){
    def command_parts = [ 
        'sed -r \'s|', 
        '\\s{4}\\"(@a1\\/',
        // name
        ')\\"\\:\\s*\\"\\^?[0-9]*\\.[0-9]*\\.[0-9]*.*\\"\\,|',
        '    \"@a1/',
        // name
        '\": \"^',
        // version
        '",|\' package.json > package1 ; rm package.json ; mv package1 package.json'
    ]
    def command = command_parts[0] + command_parts[1] + name + command_parts[2] + command_parts[3] + name + command_parts[4] + version + command_parts[5]
    return command
}

String getMostHighVersion(String version_list){
    def mod_version_list = "\'" + version_list + "\'"
    return sh(returnStdout: true, script: "printf ${mod_version_list} | sort -V | tail -1").trim()
}

Boolean isTagExist(String version){
    def tag = '\'refs/tags/' + 'v' + version + '\''
    def grep_statement = '\'^' + tag + '\$\''
    def tag_count = sh(returnStdout: true, script: "git ls-remote -q --tags | awk '{print \$2}'| grep ${grep_statement} | wc -l").trim().toInteger()
    if(tag_count > 0) return true
    else return false
}

String getComponentVersion(String component_name){
    def mod_component_name = '\'\"' + component_name + '\"\''
    def ver = "" + sh(returnStdout: true, script: "cat package.json | grep ${mod_component_name} | egrep -o '[0-9]+\\.[0-9]+\\.[0-9]+(\\-[a-zA-Z0-9]*)?' || true").trim()
    return ver
}

String getPackageVersion(){
    return "" + sh(returnStdout: true, script: "cat package.json | grep '\"version\":' | tr -d ',\"[:space:]' | cut -d: -f2").trim()
}

void checkPackageProperties(Boolean isRelease, String packageName, String packageVersion, Map projects){
    overview = packageName + " versions in package.json\n    "
    def isBaseVerValid = true
    if (isRelease == false){
        projects.each{ k,v ->
            if (k == packageName) return
                dir(k + "/") {
                    def full_name = "@a1/" + packageName
                    def component_version = getComponentVersion(full_name)
                    isBaseVerValid = isBaseVerValid && ((component_version  ==~ /\d+\.{1}\d+\.{1}\d+/) || (component_version  == ""))
                    overview = overview + k + ": " + component_version + "\n    "
                }
            }
        echo "${overview}"
        if (isBaseVerValid == false) {
            error("Some widgets has wrong version. Release build will be interrupted.")
        }
    }
    else{
        echo "Now will be set actual version of ${packageName} in 'package.json' of widgets"
        projects.each{ k,v ->
            dir(k + "/"){
                def set_version = ComponentVersion(packageName, packageVersion)
                sh "${set_version}"
                sh "git add package.json || true"
            }
        }
    }
}

Boolean isPluggableModule(String packageName){
    if ((packageName == "microfrontend-hfhs-base") || (packageName == "microfrontend-hfhs-connector")) return true
    else return false
}

String reportWidgetStatus(String widget_name, String widget_version, String release_version){
    def name = widget_name
    def prev_version = widget_version
    def curr_version = widget_version
    def highlight = ""
    if (widget_version == ""){
        highlight = 'bgcolor="#61f14d"'
        prev_version = "-"
        curr_version = release_version
    }
    else{
        if (isReleaseNeeded(widget_version) == true) {
            highlight = 'bgcolor="#f5e629"'
            curr_version = release_version
        }
    }
    def row = """
    <tr ${highlight}>
      <td>${name}</td>
      <td>${prev_version}</td>
      <td>${curr_version}</td>
    </tr>
    """
    return row
}

String report(Map projects, String release_version){
    def widget_status = ""
    projects.each { k,v ->
      widget_status = widget_status + "\n" + reportWidgetStatus(k,v,release_version)
    }
    Date date = new Date()
    String datePart = date.format("dd.MM.yyyy")
    String timePart = date.format("HH:mm")

    def build_time = timePart + " " + datePart
    def sheet = """
    <!DOCTYPE html>
    <html lang="en" dir="ltr">
      <head>
        <meta charset="utf-8">
        <title>HFHS Release ${release_version}</title>
      </head>
      <body style="font-family:system-ui,sans-serif;">
        <h1 align="center">HFHS release report</h1>
        <div class="body">
         <table border="0" width="100%">
           <tr>
             <td width="10%"></td>
             <td>
               <p>
               Congratulations! <br/>
               HFHS release version ${release_version} has been done successfully. Here is the list of widgets: <br/>
               </p>
               <p>
               <table width="100%" border="0">
                 <tr>
                   <th width='50%'>Name</th>
                   <th>Previous version</th>
                   <th>Current version</th>
                 </tr>
                 ${widget_status}
               </table>
               </p>
             </td>
             <td width="10%"></td>
           </tr>
         </table>
        </div>
        <div class="footer">
          <hr/>
          <p style="font-size: 8pt; text-align:center"> This report was generated automatically at ${build_time} </p>
        </div>
      </body>
    </html>
    """
    return sheet
}

pipeline{
    agent{
        node{
            label null
        }
    }
    options{
        disableConcurrentBuilds()
        parallelsAlwaysFailFast()
    }
    stages{
        stage('Prepare to build'){
            stages{
                stage('Clone repos'){
                    steps{
                        deleteDir()
                        withCredentials([usernamePassword(credentialsId: JENKIN_GIT_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                            sh "docker login -u ${USERNAME} -p ${PASSWORD} tasktrack.telekom.at/gucci-docker-local"
                            script{
                                projects.each {k,v ->
                                    sh "git clone https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/${k}.git"
                                }
                            }
                        }
                    }
                }
                stage('Get versions of widgets'){
                    steps{
                        script{
                            projects.each { k,v ->
                                dir(k + "/") {
                                    sh 'git checkout develop && git status'
                                    projects[k] = sh(returnStdout: true, script: 'git describe --tags | cut -c 2-').trim()
                                    ver_list = ver_list + sh(returnStdout: true, script: 'git describe --tags | cut -c 2- | cut -d- -f1' ).trim() + "\\n"
                                } 
                            }
                            proposal_version = getMostHighVersion(ver_list)
                            overview = overview + ": " + proposal_version + "\n    "
                            projects.each { k,v ->
                                overview = overview + k + ": " + Conclusion(v) + "\n    "
                            }
                            echo "${overview}"
                            base_ver = base_ver + proposal_version
                        }
                    }
                }
                stage('Prerelease check'){
                    steps{
                        script{
                            base_build = input(
                                id: 'base_build', message: 'HFHS Release',
                                parameters: [
                                        booleanParam(defaultValue: isReleaseNeeded(projects.find{it.key == "microfrontend-hfhs-base" }?.value),
                                                    description: "Make release of Base",
                                                    name: 'isBaseRelease'),
                                        booleanParam(defaultValue: isReleaseNeeded(projects.find{it.key == "microfrontend-hfhs-connector" }?.value),
                                                    description: "Make release of HFHS Connector",
                                                    name: 'isConnectorRelease'),
                                        string(defaultValue: "$base_ver",
                                            description: 'with version',
                                            name: 'baseVersion'),
                                ])
                            if (!(base_build['baseVersion']  ==~ /\d+\.{1}\d+\.{1}\d+/)){
                                error("Inappropriate base version. Release build will be interrupted.")
                            }
                            echo "Check if tag not exist"
                            def notValidTag = 0
                            projects.each{ k,v ->
                                dir(k + "/"){
                                    if(isTagExist(base_build['baseVersion']) == true){
                                        echo "${k} already have tag ${base_build['baseVersion']}"
                                        notValidTag += 1
                                    }
                                }
                            }
                            if (notValidTag > 0 ){
                                error("Some projects already have tag ${base_build['baseVersion']}. Release build will be interrupted.")
                            }
                        }
                    }
                }
            }
        }
        stage('Build components'){
            stages{
                stage('Component: Base'){
                    stages{
                        stage('Check widgets'){
                            steps{
                                script{
                                    checkPackageProperties(base_build['isBaseRelease'], "microfrontend-hfhs-base", base_build['baseVersion'], projects)
                                }
                            }
                        }
                        stage('Prepare'){
                            when{
                                expression{
                                    base_build['isBaseRelease'] == true && base_build['baseVersion']  ==~ /\d+\.{1}\d+\.{1}\d+/
                                }
                            }
                            steps{
                                dir("microfrontend-hfhs-base/"){
                                    sh 'git status'
                                    nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                        sh 'npm i'
                                    }
                                }
                            }
                        }
                        stage('Build'){
                            when{
                                expression{
                                    base_build['isBaseRelease'] == true && base_build['baseVersion']  ==~ /\d+\.{1}\d+\.{1}\d+/
                                }
                            }
                            steps{
                                dir("microfrontend-hfhs-base/"){
                                    sh 'git status'
                                    nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                        sh 'npm run build'
                                        sh 'git checkout package-lock.json'
                                        sh "npm version ${base_build['baseVersion']} --force"
                                    }
                                }
                            }
                        }
                        stage('Push tags'){
                            when{
                                expression{
                                    base_build['isBaseRelease'] == true && base_build['baseVersion']  ==~ /\d+\.{1}\d+\.{1}\d+/
                                }
                            }
                            steps{
                                dir("microfrontend-hfhs-base/"){
                                    sh 'git status'
                                    withCredentials([usernamePassword(credentialsId: JENKIN_GIT_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                        sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-base.git"
                                        sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-base.git --tags"
                                        nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                            sh "npm-cli-adduser --registry https://tasktrack.telekom.at/artifactory/api/npm/npm-repos --username ${USERNAME}  --password ${PASSWORD} --email ${USERNAME}@a1.at --scope @a1"
                                            sh "npm publish"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                stage('Component: Connector'){
                    stages{
                        stage('Check widgets'){
                            steps{
                                script{
                                    checkPackageProperties(base_build['isConnectorRelease'], "microfrontend-hfhs-connector", base_build['baseVersion'], projects)
                                }
                            }
                        }
                        stage('Prepare'){
                            when{
                                expression{
                                    base_build['isConnectorRelease'] == true && base_build['baseVersion']  ==~ /\d+\.{1}\d+\.{1}\d+/
                                }
                            }
                            steps{
                                dir("microfrontend-hfhs-connector/"){
                                    sh 'git status'
                                    nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                        sh 'npm i'
                                    }
                                }
                            }
                        }
                        stage('Build'){
                            when{
                                expression{
                                    base_build['isConnectorRelease'] == true && base_build['baseVersion']  ==~ /\d+\.{1}\d+\.{1}\d+/
                                }
                            }
                            steps{
                                dir("microfrontend-hfhs-connector/"){
                                    sh 'git status'
                                    nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                        sh 'npm run build'
                                        sh 'git checkout package-lock.json'
                                        sh "npm version ${base_build['baseVersion']} --force"
                                    }
                                }
                            }
                        }
                        stage('Push tags'){
                            when{
                                expression{
                                    base_build['isConnectorRelease'] == true && base_build['baseVersion']  ==~ /\d+\.{1}\d+\.{1}\d+/
                                }
                            }
                            steps{
                                dir("microfrontend-hfhs-connector/"){
                                    sh 'git status'
                                    withCredentials([usernamePassword(credentialsId: JENKIN_GIT_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                        sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-connector.git"
                                        sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-connector.git --tags"
                                        nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                            sh "npm-cli-adduser --registry https://tasktrack.telekom.at/artifactory/api/npm/npm-repos --username ${USERNAME}  --password ${PASSWORD} --email ${USERNAME}@a1.at --scope @a1"
                                            sh "npm publish"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('Build widgets'){
            stages{
                stage('Widget: Processing'){
                    when{
                        expression{
                            isReleaseNeeded(projects.find{it.key == "microfrontend-hfhs-processing" }?.value) == true
                        }
                    }
                    stages{
                        stage('Prepare'){
                            steps{
                                dir("microfrontend-hfhs-processing/"){
                                    sh 'git status'
                                    nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                        sh 'npm i'
                                    }
                                }
                            }
                        }
                        stage('Build'){
                            steps{
                                dir("microfrontend-hfhs-processing/"){
                                    sh 'git status'
                                    nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                        sh 'npm run build'
                                        sh "npm version ${base_build['baseVersion']} --force"
                                    }
                                }
                            }
                        }
                        stage('Publish'){
                            steps{
                                dir("microfrontend-hfhs-processing/"){
                                    sh 'git status'
                                    withCredentials([usernamePassword(credentialsId: JENKIN_GIT_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                        sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-processing.git"
                                        sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-processing.git --tags"
                                        nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                            sh "npm-cli-adduser --registry https://tasktrack.telekom.at/artifactory/api/npm/npm-repos --username ${USERNAME}  --password ${PASSWORD} --email ${USERNAME}@a1.at --scope @a1"
                                            sh "npm run docker-push-image"
                                            sh "npm publish"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                stage('Widget: Change Ownership'){
                    when{
                        expression{
                            isReleaseNeeded(projects.find{it.key == "microfrontend-hfhs-changeownership" }?.value) == true
                        }
                    }
                    stages{
                        stage('Prepare'){
                            steps{
                                dir("microfrontend-hfhs-changeownership/"){
                                    sh 'git status'
                                    nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                        sh 'npm i'
                                    }
                                }
                            }
                        }
                        stage('Build'){
                            steps{
                                dir("microfrontend-hfhs-changeownership/"){
                                    sh 'git status'
                                    nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                        sh 'npm run build'
                                        sh "npm version ${base_build['baseVersion']} --force"
                                    }
                                }
                            }
                        }
                        stage('Publish'){
                            steps{
                                dir("microfrontend-hfhs-changeownership/"){
                                    sh 'git status'
                                    withCredentials([usernamePassword(credentialsId: JENKIN_GIT_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                        sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-changeownership.git"
                                        sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-changeownership.git --tags"
                                        nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                            sh "npm-cli-adduser --registry https://tasktrack.telekom.at/artifactory/api/npm/npm-repos --username ${USERNAME}  --password ${PASSWORD} --email ${USERNAME}@a1.at --scope @a1"
                                            sh "npm run docker-push-image"
                                            sh "npm publish"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                stage('Widget: Business Transaction Detail'){
                    when{
                        expression{
                            isReleaseNeeded(projects.find{it.key == "microfrontend-hfhs-business-transaction-detail" }?.value) == true
                        }
                    }
                    stages{
                        stage('Prepare'){
                            steps{
                                dir("microfrontend-hfhs-business-transaction-detail/"){
                                    sh 'git status'
                                    nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                        sh 'npm i'
                                    }
                                }
                            }
                        }
                        stage('Build'){
                            steps{
                                dir("microfrontend-hfhs-business-transaction-detail/"){
                                    sh 'git status'
                                    nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                        sh 'npm run build'
                                        sh "npm version ${base_build['baseVersion']} --force"
                                    }
                                }
                            }
                        }
                        stage('Publish'){
                            steps{
                                dir("microfrontend-hfhs-business-transaction-detail/"){
                                    sh 'git status'
                                    withCredentials([usernamePassword(credentialsId: JENKIN_GIT_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                        sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-business-transaction-detail.git"
                                        sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-business-transaction-detail.git --tags"
                                        nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                            sh "npm-cli-adduser --registry https://tasktrack.telekom.at/artifactory/api/npm/npm-repos --username ${USERNAME}  --password ${PASSWORD} --email ${USERNAME}@a1.at --scope @a1"
                                            sh "npm run docker-push-image"
                                            sh "npm publish"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                stage('Widget: Product Details'){
                    when{
                        expression{
                            isReleaseNeeded(projects.find{it.key == "microfrontend-hfhs-product-details" }?.value) == true
                        }
                    }
                    stages{
                        stage('Prepare'){
                            steps{
                                dir("microfrontend-hfhs-product-details/"){
                                    sh 'git status'
                                    nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                        sh 'npm i'
                                    }
                                }
                            }
                        }
                        stage('Build'){
                            steps{
                                dir("microfrontend-hfhs-product-details/"){
                                    sh 'git status'
                                    nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                        sh 'npm run build'
                                        sh "npm version ${base_build['baseVersion']} --force"
                                    }
                                }
                            }
                        }
                        stage('Publish'){
                            steps{
                                dir("microfrontend-hfhs-product-details/"){
                                    sh 'git status'
                                    withCredentials([usernamePassword(credentialsId: JENKIN_GIT_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                        sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-product-details.git"
                                        sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-product-details.git --tags"
                                        nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                            sh "npm-cli-adduser --registry https://tasktrack.telekom.at/artifactory/api/npm/npm-repos --username ${USERNAME}  --password ${PASSWORD} --email ${USERNAME}@a1.at --scope @a1"
                                            sh "npm run docker-push-image"
                                            sh "npm publish"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                stage('Widget: Search Product'){
                    when{
                        expression{
                            isReleaseNeeded(projects.find{it.key == "microfrontend-hfhs-search-product" }?.value) == true
                        }
                    }
                    stages{
                        stage('Install deps'){
                            steps{
                                dir("microfrontend-hfhs-search-product/"){
                                    sh 'git status'
                                    nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                        sh 'npm i'
                                    }
                                }
                            }
                        }
                        stage('Build'){
                            steps{
                                dir("microfrontend-hfhs-search-product/"){
                                    nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                        sh 'npm run build'
                                        sh 'git checkout package-lock.json'
                                        sh "npm version ${base_build['baseVersion']} --force"
                                    }
                                }
                            }
                        }
                        stage('Publish'){
                            steps{
                                dir("microfrontend-hfhs-search-product/"){
                                    withCredentials([usernamePassword(credentialsId: JENKIN_GIT_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                                        sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/search-product.git"
                                        sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/search-product.git --tags"
                                        nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                            sh "npm-cli-adduser --registry https://tasktrack.telekom.at/artifactory/api/npm/npm-repos --username ${USERNAME}  --password ${PASSWORD} --email ${USERNAME}@a1.at --scope @a1"
                                            sh "npm publish"
                                            sh "npm run docker-push-image"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                stage('Widget: Product Move'){
                    when{
                        expression{
                            isReleaseNeeded(projects.find{it.key == "microfrontend-hfhs-product-move" }?.value) == true
                        }
                    }
                    stages{
                        stage('Install deps'){
                            steps{
                                dir("microfrontend-hfhs-product-move/"){
                                    sh 'git status'
                                    nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                        sh 'npm i'
                                    }
                                }
                            }
                        }
                        stage('Build'){
                            steps{
                                dir("microfrontend-hfhs-product-move/"){
                                    sh 'git status'
                                    nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                        sh 'npm run build'
                                        sh "npm version ${base_build['baseVersion']} --force"
                                    }
                                }
                            }
                        }
                        stage('Publish'){
                            steps{
                                dir("microfrontend-hfhs-product-move/"){
                                    withCredentials([usernamePassword(credentialsId: JENKIN_GIT_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                                        sh 'git status'
                                        sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/product-move.git"
                                        sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/product-move.git --tags"
                                        nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                            sh "npm-cli-adduser --registry https://tasktrack.telekom.at/artifactory/api/npm/npm-repos --username ${USERNAME}  --password ${PASSWORD} --email ${USERNAME}@a1.at --scope @a1"
                                            sh "npm publish"
                                            sh "npm run docker-push-image"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                stage('Widget: Toolbar'){
                    when{
                        expression{
                            isReleaseNeeded(projects.find{it.key == "microfrontend-hfhs-toolbar" }?.value) == true
                        }
                    }
                    stages{
                        stage('Install deps'){
                            steps{
                                dir("microfrontend-hfhs-toolbar/"){
                                    sh 'git status'
                                    nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                        sh 'npm i'
                                    }
                                }
                            }
                        }
                        stage('Build'){
                            steps{
                                dir("microfrontend-hfhs-toolbar/"){
                                    sh 'git status' 
                                    nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {         
                                        sh 'npm run build'
                                        sh "npm version ${base_build['baseVersion']} --force"
                                    }
                                }
                            }
                        }
                        stage('Publish'){
                            steps{
                                dir("microfrontend-hfhs-toolbar/"){
                                    withCredentials([usernamePassword(credentialsId: JENKIN_GIT_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                                        sh 'git status'
                                        sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-toolbar.git"
                                        sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-toolbar.git --tags"
                                        nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                            sh "npm-cli-adduser --registry https://tasktrack.telekom.at/artifactory/api/npm/npm-repos --username ${USERNAME}  --password ${PASSWORD} --email ${USERNAME}@a1.at --scope @a1"
                                            sh "npm publish"
                                            sh "npm run docker-push-image"
                                        }
                                    }
                                }
                            }
                        }
                        stage("Deploy to Kubernetes"){
                            environment {
                                NODE_ENV = 'integration'
                                NAMESPACE = 'gucci-int'
                                REPLICA_COUNT = '1'
                            }
                            steps{
                                dir("microfrontend-hfhs-toolbar/"){
                                    script {
                                        env.IMAGE_VERSION = getPackageVersion()
                                    }
                                    echo "Deploying version: ${IMAGE_VERSION} to INT"
                                    withKubeConfig([credentialsId: JENKIN_K8S_CREDENTIALS_ID]) {
                                        sh 'envsubst < kubernetes/deployment.yml | kubectl apply -v=6 -f -'
                                        sh 'envsubst < kubernetes/service.yml | kubectl apply -v=6 -f -'
                                    }
                                }
                            }
                        }
                    }
                }
                stage('Widget: Business Transaction History'){
                    when{
                        expression{
                            isReleaseNeeded(projects.find{it.key == "microfrontend-hfhs-business-transaction-history" }?.value) == true
                        }
                    }
                    stages{
                        stage('Install deps'){
                            steps{
                                dir("microfrontend-hfhs-business-transaction-history/"){
                                    sh 'git status'
                                    nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                        sh 'npm i'
                                    }
                                }
                            }
                        }
                        stage('Build'){
                            steps{
                                dir("microfrontend-hfhs-business-transaction-history/"){
                                    sh 'git status'
                                    nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                        sh 'npm run build'
                                        sh "npm version ${base_build['baseVersion']} --force"
                                    }
                                }
                            }
                        }
                        stage('Publish'){
                            steps{
                                dir("microfrontend-hfhs-business-transaction-history/"){
                                    withCredentials([usernamePassword(credentialsId: JENKIN_GIT_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                                        sh "git status"
                                        sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-business-transaction-history.git"
                                        sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-business-transaction-history.git --tags"
                                        nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                            sh "npm-cli-adduser --registry https://tasktrack.telekom.at/artifactory/api/npm/npm-repos --username ${USERNAME}  --password ${PASSWORD} --email ${USERNAME}@a1.at --scope @a1"
                                            sh "npm publish"
                                            sh "npm run docker-push-image"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        stage("Deploy widgets to INT"){
            environment {
                NODE_ENV = 'integration'
                NAMESPACE = 'gucci-int'
                REPLICA_COUNT = '1'
            }
            steps{
                script{
                    projects.each{ k,v ->
                        if ((isReleaseNeeded(projects.find{it.key == k}?.value) == false) || (isPluggableModule(k) == true)) return
                        dir(k + "/") {
                            env.IMAGE_VERSION = getPackageVersion()
                            echo "Deploying ${k} to INT"
                            withKubeConfig([credentialsId: JENKIN_K8S_CREDENTIALS_ID]) {
                                sh 'envsubst < kubernetes/deployment.yml | kubectl apply -v=6 -f -'
                                sh 'envsubst < kubernetes/service.yml | kubectl apply -v=6 -f -'
                            }
                        }
                    }
                }
            }
        }
        stage("Perform sanity tests"){
            steps{
                build job: sanity_test_job_name,  propagate: false, quietPeriod: 300
            }
        }
    }
    post{
        success{
            script{
                projects.each{ k,v ->
                    sh "docker rmi \$(docker images tasktrack.telekom.at/gucci-docker-local/${k}:latest | tail -n +2 | awk '{print \$3}') -f || true"
                }
            }
            emailext to: INFORM_ABOUT_FAILURE,
                     subject: "${JOB_NAME} for version ${base_build['baseVersion']} has been finished",
                     body: report(projects, base_build['baseVersion']),
                     attachLog: false,
                     mimeType: 'text/html'
        }
        failure {
            emailext to: INFORM_ABOUT_FAILURE,
                     subject: "${JOB_NAME} for version ${base_build['baseVersion']} has been failed",
                     body: "Please go to ${BUILD_URL} and verify the build",
                     attachLog: true
        }
    }
}