/*
Jenkinsfile for building of HFHS widgets release versions.

Build starts manually.
*/

Boolean isReleaseNeeded(String packageVersion){
    String prerelease_regex = /\d+\.{1}\d+\.{1}\d+\-.*/
    if ((packageVersion ==~ prerelease_regex) || (packageVersion == "" )) return true
    else return false
}

String Conclusion(String ver){
    if (isReleaseNeeded(ver) == true ) return "Release Needed (" + ver + ")"
    else return "Release Not Needed (" + ver + ")"
}

String ComponentVersion(String name, String version){
    def command_parts = [ 
        'sed -r \'s|', 
        '\\s{4}\\"(@a1\\/',
        // name
        ')\\"\\:\\s*\\"\\^?[0-9]*\\.[0-9]*\\.[0-9]*.*\\"\\,|',
        '    \"@a1/',
        // name
        '\": \"^',
        // version
        '",|\' package.json > package1 ; rm package.json ; mv package1 package.json'
    ]
    def command = command_parts[0] + command_parts[1] + name + command_parts[2] + command_parts[3] + name + command_parts[4] + version + command_parts[5]
    return command
}

String getMostHighVersion(String version_list){
    def mod_version_list = "\'" + version_list + "\'"
    return sh(returnStdout: true, script: "printf ${mod_version_list} | sort -V | tail -1").trim()
}

Boolean isTagExist(String version){
    def tag = '\'refs/tags/' + 'v' + version + '\''
    def grep_statement = '\'^' + tag + '\$\''
    def tag_count = sh(returnStdout: true, script: "git ls-remote -q --tags | awk '{print \$2}'| grep ${grep_statement} | wc -l").trim().toInteger()
    if(tag_count > 0) return true
    else return false
}

String getComponentVersion(String component_name){
    def mod_component_name = '\'\"' + component_name + '\"\''
    def ver = "" + sh(returnStdout: true, script: "cat package.json | grep ${mod_component_name} | egrep -o '[0-9]+\\.[0-9]+\\.[0-9]+(\\-[a-zA-Z0-9]*)?' || true").trim()
    return ver
}

/* 
Variable 'projects' contains list of widgets that can be released.
*/
def projects = [
    "microfrontend-hfhs-changeownership" : "",
    "microfrontend-product-details" : "",
    "microfrontend-hfhs-base" : "",
    "microfrontend-hfhs-common-ui" : "",
    "microfrontend-hfhs-business-transaction-detail" : "",
    "microfrontend-hfhs-business-transaction-history" : "",
    "microfrontend-hfhs-toolbar" : "",
    "product-move" : "",
    "search-product" : "",
];

def JENKIN_GIT_CREDENTIALS_ID = "8c90ce01-4736-4b5a-8661-ab6299330151"
def JENKIN_K8S_CREDENTIALS_ID = 'kubernetes-gucci-dev'
def INFORM_ABOUT_FAILURE = 'grp.hfhs@sytoss.com'
def JENKINS_NODE_JS_INSTALLATION_LABEL = 'node10.16.3'

def proposal_version = ""
def overview = "Version proposal"
def ver_list = ""
def base_ver = ""
def base_build = null
def isBaseVerValid = true

pipeline{
    agent{
        node{
            label null
        }
    }
    options{
        disableConcurrentBuilds()
        parallelsAlwaysFailFast()
    }
    stages{
        stage('Prepare to build'){
            stages{
                stage('Clone repos'){
                    steps{
                        deleteDir()
                        withCredentials([usernamePassword(credentialsId: JENKIN_GIT_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                            sh "docker login -u ${USERNAME} -p ${PASSWORD} tasktrack.telekom.at/gucci-docker-local"
                            script{
                                projects.each {k,v ->
                                    sh "git clone https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/${k}.git"
                                }
                            }
                        }
                    }
                }
                stage('Get versions of widgets'){
                    steps{
                        script{
                            projects.each { k,v ->
                                dir(k + "/") {
                                    sh 'git checkout develop && git status'
                                    projects[k] = sh(returnStdout: true, script: 'git describe --tags | cut -c 2-').trim()
                                    ver_list = ver_list + sh(returnStdout: true, script: 'git describe --tags | cut -c 2- | cut -d- -f1' ).trim() + "\\n"
                                } 
                            }
                            proposal_version = getMostHighVersion(ver_list)
                            overview = overview + ": " + proposal_version + "\n    "
                            projects.each { k,v ->
                                overview = overview + k + ": " + Conclusion(v) + "\n    "
                            }
                            echo "${overview}"
                            base_ver = (base_ver + projects.find{ it.key == "microfrontend-hfhs-base" }?.value).split('-')[0]
                        }
                    }
                }
                stage('Prerelease check'){
                    steps{
                        script{
                            base_build = input(
                                id: 'base_build', message: 'HFHS Release',
                                parameters: [
                                        booleanParam(defaultValue: isReleaseNeeded(projects.find{it.key == "microfrontend-hfhs-base" }?.value),
                                                    description: "Make release of Base",
                                                    name: 'isBaseRelease'),
                                        booleanParam(defaultValue: isReleaseNeeded(projects.find{it.key == "microfrontend-hfhs-common-ui" }?.value),
                                                    description: "Make release of Common UI",
                                                    name: 'isCUIRelease'),
                                        string(defaultValue: "$base_ver",
                                            description: 'with version',
                                            name: 'baseVersion'),
                                ])
                            if (!(base_build['baseVersion']  ==~ /\d+\.{1}\d+\.{1}\d+/)){
                                error("Inappropriate base version. Release build will be interrupted.")
                            }
                            echo "Check if tag not exist"
                            def notValidTag = 0
                            projects.each{ k,v ->
                                dir(k + "/"){
                                    if(isTagExist(base_build['baseVersion']) == true){
                                        echo "${k} already have tag ${base_build['baseVersion']}"
                                        notValidTag += 1
                                    }
                                }
                            }
                            if (notValidTag > 0 ){
                                error("Some projects already have tag ${base_build['baseVersion']}. Release build will be interrupted.")
                            }
                            overview = "Base versions in package.json\n    "

                            if (base_build['isBaseRelease'] == false){
                                projects.each{ k,v ->
                                    if (k == 'microfrontend-hfhs-base') return
                                    dir(k + "/") {
                                        def component_version = getComponentVersion('@a1/microfrontend-hfhs-base')
                                        isBaseVerValid = isBaseVerValid && ((component_version  ==~ /\d+\.{1}\d+\.{1}\d+/) || (component_version  == ""))
                                        overview = overview + k + ": " + component_version + "\n    "
                                    }
                                }
                                echo "${overview}"
                                if (isBaseVerValid == false) {
                                    error("Some widgets has wrong version of base. Release build will be interrupted.")
                                }
                            }
                            else{
                                echo "Now will be set actual version of base in 'package.json' of widgets"
                                projects.each{ k,v ->
                                    dir(k + "/"){
                                        def set_version = ComponentVersion('microfrontend-hfhs-base', base_build['baseVersion'])
                                        sh "${set_version}"
                                        sh "git add package.json && git commit -m 'Update base version' || true"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('Build'){
            stages{
                stage('Build components'){
                    stages{
                        stage('Component: Base'){
                            when{
                                expression{
                                    base_build['isBaseRelease'] == true && base_build['baseVersion']  ==~ /\d+\.{1}\d+\.{1}\d+/
                                }
                            }
                            stages{
                                stage('Prepare'){
                                    steps{
                                        dir("microfrontend-hfhs-base/"){
                                            sh 'git status'
                                            nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                sh 'npm i'
                                            }
                                        }
                                    }
                                }
                                stage('Build'){
                                    steps{
                                        dir("microfrontend-hfhs-base/"){
                                            sh 'git status' //TODO remove debug info
                                            nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                sh 'npm run build'
                                                sh 'git checkout package-lock.json'
                                                script{
                                                    def set_version = "npm version " + base_build['baseVersion']
                                                    echo "${set_version}"
                                                    sh "${set_version}"
                                                }
                                            }
                                        }
                                    }
                                }
                                stage('Push tags'){
                                    steps{
                                        dir("microfrontend-hfhs-base/"){
                                            sh 'git status' //TODO Remove debug info
                                            withCredentials([usernamePassword(credentialsId: JENKIN_GIT_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-base.git"
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-base.git --tags"
                                                nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                    sh "npm-cli-adduser --registry https://tasktrack.telekom.at/artifactory/api/npm/npm-repos --username ${USERNAME}  --password ${PASSWORD} --email ${USERNAME}@a1.at --scope @a1"
                                                    sh "npm publish"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        stage('Component: Common UI'){
                            when{
                                expression{
                                    base_build['isCUIRelease'] == true && base_build['baseVersion']  ==~ /\d+\.{1}\d+\.{1}\d+/
                                }
                            }
                            stages{
                                stage('Prepare'){
                                    steps{
                                        dir("microfrontend-hfhs-common-ui/"){
                                            sh 'git status'
                                            nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                sh 'npm i'
                                            }
                                        }
                                    }
                                }
                                stage('Build'){
                                    steps{
                                        dir("microfrontend-hfhs-common-ui/"){
                                            sh 'git status' //TODO remove debug info
                                            nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                sh 'npm run build'
                                                sh 'git checkout package-lock.json'
                                                script{
                                                    def set_version = "npm version " + base_build['baseVersion']
                                                    echo "${set_version}"
                                                    sh "${set_version}"
                                                }
                                            }
                                        }
                                    }
                                }
                                stage('Push tags'){
                                    steps{
                                        dir("microfrontend-hfhs-common-ui/"){
                                            sh 'git status' //TODO Remove debug info
                                            withCredentials([usernamePassword(credentialsId: JENKIN_GIT_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-common-ui.git"
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-common-ui.git --tags"
                                                nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                    sh "npm-cli-adduser --registry https://tasktrack.telekom.at/artifactory/api/npm/npm-repos --username ${USERNAME}  --password ${PASSWORD} --email ${USERNAME}@a1.at --scope @a1"
                                                    sh "npm publish"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                    }
                }
                stage('Build widgets'){
                    stages{ //set parallel
                        stage('Widget: Change Ownership'){
                            when{
                                expression{
                                    isReleaseNeeded(projects.find{it.key == "microfrontend-hfhs-changeownership" }?.value) == true
                                }
                            }
                            stages{
                                stage('Prepare'){
                                    steps{
                                        dir("microfrontend-hfhs-changeownership/"){
                                            sh 'git status'
                                            nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                sh 'npm i'
                                            }
                                        }
                                    }
                                }
                                stage('Build'){
                                    steps{
                                        dir("microfrontend-hfhs-changeownership/"){
                                            sh 'git status'
                                            nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                sh 'npm run build'
                                                script{
                                                    def set_version = "npm version " + base_build['baseVersion']
                                                    echo "${set_version}"
                                                    sh "${set_version}"
                                                }
                                            }
                                        }
                                    }
                                }
                                stage('Publish'){
                                    steps{
                                        dir("microfrontend-hfhs-changeownership/"){
                                            sh 'git status'
                                            withCredentials([usernamePassword(credentialsId: JENKIN_GIT_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-changeownership.git"
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-changeownership.git --tags"
                                                nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                    sh "npm-cli-adduser --registry https://tasktrack.telekom.at/artifactory/api/npm/npm-repos --username ${USERNAME}  --password ${PASSWORD} --email ${USERNAME}@a1.at --scope @a1"
                                                    sh "npm run docker-push-image"
                                                    sh "npm publish"
                                                }
                                            }
                                        }
                                    }
                                }
                                stage("Deploy to Kubernetes"){
                                    environment {
                                        NODE_ENV = 'integration'
                                        NAMESPACE = 'gucci-int'
                                        REPLICA_COUNT = '1'
                                    }
                                    steps{
                                        dir("microfrontend-hfhs-changeownership/"){
                                            script {
                                                env.IMAGE_VERSION  = sh(returnStdout: true, script: "cat package.json | grep '\"version\":' | cut -d: -f2 | cut -d, -f1 | cut -c 3- | rev | cut -c 2- | rev").trim()
                                            }
                                            echo "Deploying version: ${IMAGE_VERSION} to INT"
                                            withKubeConfig([credentialsId: JENKIN_K8S_CREDENTIALS_ID]) {
                                                sh 'envsubst < kubernetes/deployment.yml | kubectl apply -v=6 -f -'
                                                sh 'envsubst < kubernetes/service.yml | kubectl apply -v=6 -f -'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        stage('Widget: Business Transaction Detail'){
                            when{
                                expression{
                                    isReleaseNeeded(projects.find{it.key == "microfrontend-hfhs-business-transaction-detail" }?.value) == true
                                }
                            }
                            stages{
                                stage('Prepare'){
                                    steps{
                                        dir("microfrontend-hfhs-business-transaction-detail/"){
                                            sh 'git status'
                                            nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                sh 'npm i'
                                            }
                                        }
                                    }
                                }
                                stage('Build'){
                                    steps{
                                        dir("microfrontend-hfhs-business-transaction-detail/"){
                                            sh 'git status'
                                            nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                sh 'npm run build'
                                                script{
                                                    def set_version = "npm version " + base_build['baseVersion']
                                                    echo "${set_version}"
                                                    sh "${set_version}"
                                                }
                                            }
                                        }
                                    }
                                }
                                stage('Publish'){
                                    steps{
                                        dir("microfrontend-hfhs-business-transaction-detail/"){
                                            sh 'git status'
                                            withCredentials([usernamePassword(credentialsId: JENKIN_GIT_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-business-transaction-detail.git"
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-business-transaction-detail.git --tags"
                                                nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                    sh "npm-cli-adduser --registry https://tasktrack.telekom.at/artifactory/api/npm/npm-repos --username ${USERNAME}  --password ${PASSWORD} --email ${USERNAME}@a1.at --scope @a1"
                                                    sh "npm run docker-push-image"
                                                    sh "npm publish"
                                                }
                                            }
                                        }
                                    }
                                }
                                stage("Deploy to Kubernetes"){
                                    environment {
                                        NODE_ENV = 'integration'
                                        NAMESPACE = 'gucci-int'
                                        REPLICA_COUNT = '1'
                                    }
                                    steps{
                                        dir("microfrontend-hfhs-business-transaction-detail/"){
                                            script {
                                                env.IMAGE_VERSION  = sh(returnStdout: true, script: "cat package.json | grep '\"version\":' | cut -d: -f2 | cut -d, -f1 | cut -c 3- | rev | cut -c 2- | rev").trim()
                                            }
                                            echo "Deploying version: ${IMAGE_VERSION} to INT"
                                            withKubeConfig([credentialsId: JENKIN_K8S_CREDENTIALS_ID]) {
                                                sh 'envsubst < kubernetes/deployment.yml | kubectl apply -v=6 -f -'
                                                sh 'envsubst < kubernetes/service.yml | kubectl apply -v=6 -f -'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        stage('Widget: Product Details'){
                            when{
                                expression{
                                    isReleaseNeeded(projects.find{it.key == "microfrontend-product-details" }?.value) == true
                                }
                            }
                            stages{
                                stage('Prepare'){
                                    steps{
                                        dir("microfrontend-product-details/"){
                                            sh 'git status'
                                            nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                sh 'npm i'
                                            }
                                        }
                                    }
                                }
                                stage('Build'){
                                    steps{
                                        dir("microfrontend-product-details/"){
                                            sh 'git status'
                                            nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                sh 'npm run build'
                                                script{
                                                    def set_version = "npm version " + base_build['baseVersion']
                                                    echo "${set_version}"
                                                    sh "${set_version}"
                                                }
                                            }
                                        }
                                    }
                                }
                                stage('Publish'){
                                    steps{
                                        dir("microfrontend-product-details/"){
                                            sh 'git status'
                                            withCredentials([usernamePassword(credentialsId: JENKIN_GIT_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-product-details.git"
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-product-details.git --tags"
                                                nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                    sh "npm-cli-adduser --registry https://tasktrack.telekom.at/artifactory/api/npm/npm-repos --username ${USERNAME}  --password ${PASSWORD} --email ${USERNAME}@a1.at --scope @a1"
                                                    sh "npm run docker-push-image"
                                                    sh "npm publish"
                                                }
                                            }
                                        }
                                    }
                                }
                                stage("Deploy to Kubernetes"){
                                    environment {
                                        NODE_ENV = 'integration'
                                        NAMESPACE = 'gucci-int'
                                        REPLICA_COUNT = '1'
                                    }
                                    steps{
                                        dir("microfrontend-product-details/"){
                                            script {
                                                env.IMAGE_VERSION  = sh(returnStdout: true, script: "cat package.json | grep '\"version\":' | cut -d: -f2 | cut -d, -f1 | cut -c 3- | rev | cut -c 2- | rev").trim()
                                            }
                                            echo "Deploying version: ${IMAGE_VERSION} to INT"
                                            withKubeConfig([credentialsId: JENKIN_K8S_CREDENTIALS_ID]) {
                                                sh 'envsubst < kubernetes/deployment.yml | kubectl apply -v=6 -f -'
                                                sh 'envsubst < kubernetes/service.yml | kubectl apply -v=6 -f -'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        stage('Widget: Search Product'){
                            when{
                                expression{
                                    isReleaseNeeded(projects.find{it.key == "search-product" }?.value) == true
                                }
                            }
                            stages{
                                stage('Install deps'){
                                    steps{
                                        dir("search-product/"){
                                            sh 'git status'
                                            nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                sh 'npm i'
                                            }
                                        }
                                    }
                                }
                                stage('Build'){
                                    steps{
                                        dir("search-product/"){
                                            nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                sh 'npm run build'
                                                sh 'git checkout package-lock.json'
                                                script{
                                                    def set_version = "npm version " + base_build['baseVersion']
                                                    echo "${set_version}"
                                                    sh "${set_version}"
                                                }
                                            }
                                        }
                                    }
                                }
                                stage('Publish'){
                                    steps{
                                        dir("search-product/"){
                                            withCredentials([usernamePassword(credentialsId: JENKIN_GIT_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/search-product.git"
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/search-product.git --tags"
                                                nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                    sh "npm-cli-adduser --registry https://tasktrack.telekom.at/artifactory/api/npm/npm-repos --username ${USERNAME}  --password ${PASSWORD} --email ${USERNAME}@a1.at --scope @a1"
                                                    sh "npm publish"
                                                    sh "npm run docker-push-image"
                                                }
                                            }
                                        }
                                    }
                                }
                                stage("Deploy to Kubernetes"){
                                    environment {
                                        NODE_ENV = 'integration'
                                        NAMESPACE = 'gucci-int'
                                        REPLICA_COUNT = '1'
                                    }
                                    steps{
                                        dir("search-product/"){
                                            script {
                                                env.IMAGE_VERSION  = sh(returnStdout: true, script: "cat package.json | grep '\"version\":' | cut -d: -f2 | cut -d, -f1 | cut -c 3- | rev | cut -c 2- | rev").trim()
                                            }
                                            echo "Deploying version: ${IMAGE_VERSION} to INT"
                                            withKubeConfig([credentialsId: JENKIN_K8S_CREDENTIALS_ID]) {
                                                sh 'envsubst < kubernetes/deployment.yml | kubectl apply -v=6 -f -'
                                                sh 'envsubst < kubernetes/service.yml | kubectl apply -v=6 -f -'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        stage('Widget: Product Move'){
                            when{
                                expression{
                                    isReleaseNeeded(projects.find{it.key == "product-move" }?.value) == true
                                }
                            }
                            stages{
                                stage('Install deps'){
                                    steps{
                                        dir("product-move/"){
                                            sh 'git status'
                                            nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                sh 'npm i'
                                            }
                                        }
                                    }
                                }
                                stage('Build'){
                                    steps{
                                        dir("product-move/"){
                                            sh 'git status' //TODO Remove debug info
                                            nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                sh 'npm run build'
                                                script{
                                                    def set_version = "npm version " + base_build['baseVersion']
                                                    echo "${set_version}"
                                                    sh "${set_version}"
                                                }
                                            }
                                        }
                                    }
                                }
                                stage('Publish'){
                                    steps{
                                        dir("product-move/"){
                                            withCredentials([usernamePassword(credentialsId: JENKIN_GIT_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                                                sh 'git status' //TODO Remove debug info
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/product-move.git"
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/product-move.git --tags"
                                                nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                    sh "npm-cli-adduser --registry https://tasktrack.telekom.at/artifactory/api/npm/npm-repos --username ${USERNAME}  --password ${PASSWORD} --email ${USERNAME}@a1.at --scope @a1"
                                                    sh "npm publish"
                                                    sh "npm run docker-push-image"
                                                }
                                            }
                                        }
                                    }
                                }
                                stage("Deploy to Kubernetes"){
                                    environment {
                                        NODE_ENV = 'integration'
                                        NAMESPACE = 'gucci-int'
                                        REPLICA_COUNT = '1'
                                    }
                                    steps{
                                        dir("product-move/"){
                                            script {
                                                env.IMAGE_VERSION  = sh(returnStdout: true, script: "cat package.json | grep '\"version\":' | cut -d: -f2 | cut -d, -f1 | cut -c 3- | rev | cut -c 2- | rev").trim()
                                            }
                                            echo "Deploying version: ${IMAGE_VERSION} to INT"
                                            withKubeConfig([credentialsId: JENKIN_K8S_CREDENTIALS_ID]) {
                                                sh 'envsubst < kubernetes/deployment.yml | kubectl apply -v=6 -f -'
                                                sh 'envsubst < kubernetes/service.yml | kubectl apply -v=6 -f -'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        stage('Widget: Toolbar'){
                            when{
                                expression{
                                    isReleaseNeeded(projects.find{it.key == "microfrontend-hfhs-toolbar" }?.value) == true
                                }
                            }
                            stages{
                                stage('Install deps'){
                                    steps{
                                        dir("microfrontend-hfhs-toolbar/"){
                                            sh 'git status'
                                            nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                sh 'npm i'
                                            }
                                        }
                                    }
                                }
                                stage('Build'){
                                    steps{
                                        dir("microfrontend-hfhs-toolbar/"){
                                            sh 'git status' //TODO Remove debug info   
                                            nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {         
                                                sh 'npm run build'
                                                script{
                                                    def set_version = "npm version " + base_build['baseVersion']
                                                    echo "${set_version}"
                                                    sh "${set_version}"
                                                }
                                            }
                                        }
                                    }
                                }
                                stage('Publish'){
                                    steps{
                                        dir("microfrontend-hfhs-toolbar/"){
                                            withCredentials([usernamePassword(credentialsId: JENKIN_GIT_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                                                sh 'git status' //TODO Remove debug info
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-toolbar.git"
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-toolbar.git --tags"
                                                nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                    sh "npm-cli-adduser --registry https://tasktrack.telekom.at/artifactory/api/npm/npm-repos --username ${USERNAME}  --password ${PASSWORD} --email ${USERNAME}@a1.at --scope @a1"
                                                    sh "npm publish"
                                                    sh "npm run docker-push-image"
                                                }
                                            }
                                        }
                                    }
                                }
                                stage("Deploy to Kubernetes"){
                                    environment {
                                        NODE_ENV = 'integration'
                                        NAMESPACE = 'gucci-int'
                                        REPLICA_COUNT = '1'
                                    }
                                    steps{
                                        dir("microfrontend-hfhs-toolbar/"){
                                            script {
                                                env.IMAGE_VERSION  = sh(returnStdout: true, script: "cat package.json | grep '\"version\":' | cut -d: -f2 | cut -d, -f1 | cut -c 3- | rev | cut -c 2- | rev").trim()
                                            }
                                            echo "Deploying version: ${IMAGE_VERSION} to INT"
                                            withKubeConfig([credentialsId: JENKIN_K8S_CREDENTIALS_ID]) {
                                                sh 'envsubst < kubernetes/deployment.yml | kubectl apply -v=6 -f -'
                                                sh 'envsubst < kubernetes/service.yml | kubectl apply -v=6 -f -'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        stage('Widget: Business Transaction History'){
                            when{
                                expression{
                                    isReleaseNeeded(projects.find{it.key == "microfrontend-hfhs-business-transaction-history" }?.value) == true
                                }
                            }
                            stages{
                                stage('Install deps'){
                                    steps{
                                        dir("microfrontend-hfhs-business-transaction-history/"){
                                            sh 'git status'
                                            nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                sh 'npm i'
                                            }
                                        }
                                    }
                                }
                                stage('Build'){
                                    steps{
                                        dir("microfrontend-hfhs-business-transaction-history/"){
                                            sh 'git status' //TODO Remove debug info
                                            nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                sh 'npm run build'
                                                script{
                                                    def set_version = "npm version " + base_build['baseVersion']
                                                    echo "${set_version}"
                                                    sh "${set_version}"
                                                }
                                            }
                                        }
                                    }
                                }
                                stage('Publish'){
                                    steps{
                                        dir("microfrontend-hfhs-business-transaction-history/"){
                                            withCredentials([usernamePassword(credentialsId: JENKIN_GIT_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                                                sh "git status" //TODO Remove debug info
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-business-transaction-history.git"
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-business-transaction-history.git --tags"
                                                nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                                                    sh "npm-cli-adduser --registry https://tasktrack.telekom.at/artifactory/api/npm/npm-repos --username ${USERNAME}  --password ${PASSWORD} --email ${USERNAME}@a1.at --scope @a1"
                                                    sh "npm publish"
                                                    sh "npm run docker-push-image"
                                                }
                                            }
                                        }
                                    }
                                }
                                stage("Deploy to Kubernetes"){
                                    environment {
                                        NODE_ENV = 'integration'
                                        NAMESPACE = 'gucci-int'
                                        REPLICA_COUNT = '1'
                                    }
                                    steps{
                                        dir("microfrontend-hfhs-business-transaction-history/"){
                                            script {
                                                env.IMAGE_VERSION  = sh(returnStdout: true, script: "cat package.json | grep '\"version\":' | cut -d: -f2 | cut -d, -f1 | cut -c 3- | rev | cut -c 2- | rev").trim()
                                            }
                                            echo "Deploying version: ${IMAGE_VERSION} to INT"
                                            withKubeConfig([credentialsId: JENKIN_K8S_CREDENTIALS_ID]) {
                                                sh 'envsubst < kubernetes/deployment.yml | kubectl apply -v=6 -f -'
                                                sh 'envsubst < kubernetes/service.yml | kubectl apply -v=6 -f -'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post{
        success{
            sh "docker rmi \$(docker images tasktrack.telekom.at/gucci-docker-local/microfrontend-hfhs-changeownership:latest | tail -n +2 | awk '{print \$3}') -f || true"
            sh "docker rmi \$(docker images tasktrack.telekom.at/gucci-docker-local/microfrontend-hfhs-business-transaction-detail:latest | tail -n +2 | awk '{print \$3}') -f || true"
            sh "docker rmi \$(docker images tasktrack.telekom.at/gucci-docker-local/microfrontend-product-details:latest | tail -n +2 | awk '{print \$3}') -f || true"
            sh "docker rmi \$(docker images tasktrack.telekom.at/gucci-docker-local/microfrontend-search-product:latest | tail -n +2 | awk '{print \$3}') -f || true"
            sh "docker rmi \$(docker images tasktrack.telekom.at/gucci-docker-local/microfrontend-product-move:latest | tail -n +2 | awk '{print \$3}') -f || true"
            sh "docker rmi \$(docker images tasktrack.telekom.at/gucci-docker-local/microfrontend-hfhs-toolbar:latest | tail -n +2 | awk '{print \$3}') -f || true"
            sh "docker rmi \$(docker images tasktrack.telekom.at/gucci-docker-local/microfrontend-hfhs-business-transaction-history:latest | tail -n +2 | awk '{print \$3}') -f || true"
        }
        failure {
            emailext to: INFORM_ABOUT_FAILURE,
                    subject: "Jenkins Pipeline '${JOB_NAME}' (${BUILD_NUMBER}) failed",
                    body: "Please go to ${BUILD_URL} and verify the build",
                    attachLog: true
        }
    }
}