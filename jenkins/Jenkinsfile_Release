/*
Jenkinsfile for building of HFHS widgets release versions.

Build node requirements:
* Docker (user must have access to Docker CLI without 'sudo')
* NodeJS (it was tested on LTS version)
* sshpass

Build starts manually.
*/

Boolean isReleaseNeeded(String packageVersion){
    String prerelease_regex = /\d+\.{1}\d+\.{1}\d+\-.*/
    if ((packageVersion ==~ prerelease_regex) || (packageVersion == "" )) return true
    else return false
}

String Conclusion(String ver){
    if (isReleaseNeeded(ver) == true ) return "Release Needed (" + ver + ")"
    else return "Release Not Needed (" + ver + ")"
}

/* 
Variable 'projects' contains list of widgets that can be released.
*/
def projects = [
    "microfrontend-product-details": "",
    "microfrontend-hfhs-base" : "",
    "microfrontend-hfhs-business-transaction-detail" : "",
    "microfrontend-hfhs-business-transaction-history" : "",
    "microfrontend-hfhs-toolbar" : "",
    "product-move" : "",
    "search-product" : "",
];

def k8s_host = "192.168.20.70" // IP or FQDN of host that have possibility of deploying to Kubernetes

def proposal_version = ""
def overview = "Version proposal"
def ver_list = ""
def base_ver = ""
def base_build = null
def isBaseVerValid = true

// TODO: Add check of tag existing  
// TODO: Add notification about build result via e-mail or other channel
pipeline{
    agent{
        node{
            label 'node'
        }
    }
    options{
        disableConcurrentBuilds()
        parallelsAlwaysFailFast()
    }
    stages{
        stage('Prepare to build'){
            stages{
                stage('Check requirements'){
                    steps{
                        sh 'docker version && node -v && npm -v'
                        sh 'apt list | grep "sshpass"'
                    }
                }
                stage('Clone repos'){
                    steps{
                        deleteDir()
                        withCredentials([usernamePassword(credentialsId: 'a1-bitbucket', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                            sh "docker login -u ${USERNAME} -p ${PASSWORD} tasktrack.telekom.at/gucci-docker-local"
                            script{
                                projects.each {k,v ->
                                    sh "git clone https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/${k}.git"
                                }
                            }
                        }
                        sh 'ls -la'
                    }
                }
                stage('Get versions of widgets'){
                    steps{
                        script{
                            projects.each { k,v ->
                                dir(k + "/") {
                                    sh 'git checkout develop && git status' //TODO: Reduce output
                                    projects[k] = sh(returnStdout: true, script: 'git describe --tags | cut -c 2-').trim()
                                    ver_list = ver_list + sh(returnStdout: true, script: 'git describe --tags | cut -c 2- | cut -d- -f1' ).trim() + "\\n"
                                } 
                            }
                            withEnv(["LIST_VER=${ver_list}" ]){
                                proposal_version = sh(returnStdout: true, script: "printf \'$LIST_VER\' | sort -V | tail -1").trim()
                            }
                            overview = overview + ": " + proposal_version + "\n    "
                            projects.each { k,v ->
                                overview = overview + k + ": " + Conclusion(v) + "\n    "
                            }
                            echo "${overview}"
                            base_ver = (base_ver + projects.find{ it.key == "microfrontend-hfhs-base" }?.value).split('-')[0]
                        }
                    }
                }
                stage('Prerelease check'){
                    steps{
                        script{
                            base_build = input(
                                id: 'base_build', message: 'HFHS Release',
                                parameters: [
                                        booleanParam(defaultValue: true,
                                                    description: "Release base",
                                                    name: 'isBaseRelease'),
                                        string(defaultValue: "$base_ver",
                                            description: 'with version',
                                            name: 'baseVersion'),
                                ])
                            if (!(base_build['baseVersion']  ==~ /\d+\.{1}\d+\.{1}\d+/)){
                                error("Bad base version. Release will be stopped")
                            }
                            echo "Check if tag not exist"
                            def notValidTag = 0
                            projects.each{ k,v ->
                                dir(k + "/"){
                                    def check_tag = '\'refs/tags/v' + base_build['baseVersion'] + '\''
                                    withEnv(["CHECK_VER=${check_tag}"]){
                                        if (sh(returnStdout: true, script: "git ls-remote -q --tags | awk '{print \$2}'| grep '^$CHECK_VER\$' | wc -l").trim().toInteger() > 0){
                                            echo "${k} already have tag ${base_build['baseVersion']}"
                                            notValidTag += 1
                                        }
                                    }
                                }
                            }
                            if (notValidTag > 0 ){
                                error("Some projects have tag ${base_build['baseVersion']}. Release build will be interrupted.")
                            }
                            overview = "Base versions in package.json\n    "
                            if (base_build['isBaseRelease'] == false){
                                projects.each{ k,v ->
                                    if (k == 'microfrontend-hfhs-base') return
                                    dir(k + "/") {
                                        def ver_check = "" + sh(returnStdout: true, script: "cat package.json | grep '\"@a1/microfrontend-hfhs-base\"' | egrep -o '[0-9]+\\.[0-9]+\\.[0-9]+(\\-[a-zA-Z0-9]*)?' || true").trim()
                                        isBaseVerValid = isBaseVerValid && ((ver_check  ==~ /\d+\.{1}\d+\.{1}\d+/) || (ver_check  == ""))
                                        overview = overview + k + ": " + ver_check + "\n    "
                                    }
                                }
                                echo "${overview}"
                                if (isBaseVerValid == false) {
                                    error("Some widgets has wrong version of base. Release will be stopped")
                                }
                            }
                            else{
                                echo "Now will be set actual version of base in 'package.json' of widgets"
                                projects.each{ k,v ->
                                    dir(k + "/"){
                                        def comm1 = 'sed -r \'s|'
                                        def comm2 = '\\s{4}\\"(@a1\\/microfrontend-hfhs-base)\\"\\:\\s*\\"\\^?[0-9]*\\.[0-9]*\\.[0-9]*.*\\"\\,|'
                                        def comm3 = '    \"@a1/microfrontend-hfhs-base\": \"^'
                                        def comm4 = '",|\' package.json > package1 ; rm package.json ; mv package1 package.json'
                                        def command = "" + comm1 + comm2 + comm3 + base_build['baseVersion'] + comm4
                                        sh "${command}"
                                        sh "git add package.json && git commit -m 'Update base version' || true"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('Build'){
            stages{
                stage('Build Base widget'){
                    when{
                        expression{
                            base_build['isBaseRelease'] == true && base_build['baseVersion']  ==~ /\d+\.{1}\d+\.{1}\d+/
                        }
                    }
                    stages{
                        stage('Prepare'){
                            steps{
                                dir("microfrontend-hfhs-base/"){
                                    sh 'git status'
                                    sh 'npm i'
                                }
                            }
                        }
                        stage('Build'){
                            steps{
                                dir("microfrontend-hfhs-base/"){
                                    sh 'git status' //TODO remove debug info
                                    sh 'npm run build'
                                    sh 'git checkout package-lock.json'
                                    script{
                                        def set_version = "npm version " + base_build['baseVersion']
                                        echo "${set_version}"
                                        sh "${set_version}"
                                    }
                                }
                            }
                        }
                        stage('Push tags'){
                            steps{
                                dir("microfrontend-hfhs-base/"){
                                    sh 'git status' //TODO Remove debug info
                                    withCredentials([usernamePassword(credentialsId: 'a1-bitbucket', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                        sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-base.git"
                                        sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-base.git --tags"
                                        sh "npm publish"
                                    }
                                }
                            }
                        }
                    }
                }
                stage('Build widgets'){
                    stages{
                        stage('Widget: Business Transaction Detail'){
                            when{
                                expression{
                                    isReleaseNeeded(projects.find{it.key == "microfrontend-hfhs-business-transaction-detail" }?.value) == true
                                }
                            }
                            stages{
                                stage('Prepare'){
                                    steps{
                                        dir("microfrontend-hfhs-business-transaction-detail/"){
                                            sh 'git status'
                                            sh 'npm i'
                                        }
                                    }
                                }
                                stage('Build'){
                                    steps{
                                        dir("microfrontend-hfhs-business-transaction-detail/"){
                                            sh 'git status'
                                            sh 'npm run build'
                                            script{
                                                def set_version = "npm version " + base_build['baseVersion']
                                                echo "${set_version}"
                                                sh "${set_version}"
                                            }
                                        }
                                    }
                                }
                                stage('Publish'){
                                    steps{
                                        dir("microfrontend-hfhs-business-transaction-detail/"){
                                            sh 'git status'
                                            withCredentials([usernamePassword(credentialsId: 'a1-bitbucket', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-business-transaction-detail.git"
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-business-transaction-detail.git --tags"
                                                sh "npm run docker-push-image"
                                            }
                                        }
                                    }
                                }
                            }
                            post{
                                always{
                                    sh 'docker container prune -f'
                                }
                                success{
                                    withCredentials([usernamePassword(credentialsId: '78448329-a67a-41f3-8ffb-76292d5457eb', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                                        dir("microfrontend-hfhs-business-transaction-detail/"){
                                            script{
                                                def ver = sh(returnStdout: true, script: "cat package.json | grep '\"version\":' | cut -d: -f2 | cut -d, -f1 | cut -c 3- | rev | cut -c 2- | rev").trim()
                                                def command = 'export KUBECONFIG=$HOME/.kube/admin.conf; kubectl set image -n gucci deployment/microfrontend-hfhs-business-transaction-detail microfrontend-hfhs-business-transaction-detail=tasktrack.telekom.at/gucci-docker/microfrontend-hfhs-business-transaction-detail:' + ver + ' -n gucci; sleep 60; curl -X POST http://gucci-portal.k8s.sytoss.intra/portal-remote-app-registry/admin/ -H "Content-Type:application/x-www-form-urlencoded" -d "_url=http%3A%2F%2Fmicrofrontend-hfhs-business-transaction-detail.gucci%3A6105&_action=refresh"'
                                                echo "${command}"
                                                sh "sshpass -p ${PASSWORD} ssh -o StrictHostKeyChecking=no  ${USERNAME}@${k8s_host} 'bash -c \"${command} \" '"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        stage('Widget: Product Details'){
                            stages{
                                stage('Prepare'){
                                    steps{
                                        dir("microfrontend-product-details/"){
                                            sh 'git status'
                                            sh 'npm i'
                                        }
                                    }
                                }
                                stage('Build'){
                                    steps{
                                        dir("microfrontend-product-details/"){
                                            sh 'git status'
                                            sh 'npm run build'
                                            script{
                                                def set_version = "npm version " + base_build['baseVersion']
                                                echo "${set_version}"
                                                sh "${set_version}"
                                            }
                                        }
                                    }
                                }
                                stage('Publish'){
                                    steps{
                                        dir("microfrontend-product-details/"){
                                            sh 'git status'
                                            withCredentials([usernamePassword(credentialsId: 'a1-bitbucket', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-product-details.git"
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-product-details.git --tags"
                                                sh "npm run docker-push-image"
                                            }
                                        }
                                    }
                                }
                            }
                            post{
                                always{
                                    sh 'docker container prune -f'
                                }
                                success{
                                    withCredentials([usernamePassword(credentialsId: '78448329-a67a-41f3-8ffb-76292d5457eb', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                                        dir("microfrontend-product-details/"){
                                            script{
                                                def ver = sh(returnStdout: true, script: "cat package.json | grep '\"version\":' | cut -d: -f2 | cut -d, -f1 | cut -c 3- | rev | cut -c 2- | rev").trim()
                                                def command = 'export KUBECONFIG=$HOME/.kube/admin.conf; kubectl set image deployment/microfrontend-product-details microfrontend-product-details=tasktrack.telekom.at/gucci-docker/microfrontend-product-details:' + ver + ' -n gucci; sleep 20; curl -X POST http://gucci-portal.k8s.sytoss.intra/portal-remote-app-registry/admin/ -H "Content-Type:application/x-www-form-urlencoded" -d "_url=http%3A%2F%2Fmicrofrontend-product-details.gucci%3A6103&_action=refresh"'
                                                echo "${command}"
                                                sh "sshpass -p ${PASSWORD} ssh -o StrictHostKeyChecking=no  ${USERNAME}@${k8s_host} 'bash -c \"${command} \" '"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        stage('Widget: Search Product'){
                            when{
                                expression{
                                    isReleaseNeeded(projects.find{it.key == "search-product" }?.value) == true
                                }
                            }
                            stages{
                                stage('Install deps'){
                                    steps{
                                        dir("search-product/"){
                                            sh 'git status'
                                            sh 'npm i'
                                        }
                                    }
                                }
                                stage('Build'){
                                    steps{
                                        dir("search-product/"){
                                            sh 'npm run build'
                                            sh 'git checkout package-lock.json'
                                            script{
                                                def set_version = "npm version " + base_build['baseVersion']
                                                echo "${set_version}"
                                                sh "${set_version}"
                                            }
                                        }
                                    }
                                }
                                stage('Publish'){
                                    steps{
                                        dir("search-product/"){
                                            withCredentials([usernamePassword(credentialsId: 'a1-bitbucket', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/search-product.git"
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/search-product.git --tags"
                                                sh "npm publish"
                                                sh "npm run docker-push-image"
                                                sh "git status" //TODO Remove debug info
                                            }
                                        }
                                    }
                                }
                            }
                            post{
                                always{
                                    sh 'docker container prune -f'
                                }
                                success{
                                    withCredentials([usernamePassword(credentialsId: '78448329-a67a-41f3-8ffb-76292d5457eb', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                                        dir("search-product/"){
                                            script{
                                                def ver = sh(returnStdout: true, script: "cat package.json | grep '\"version\":' | cut -d: -f2 | cut -d, -f1 | cut -c 3- | rev | cut -c 2- | rev").trim()
                                                def command = 'export KUBECONFIG=$HOME/.kube/admin.conf; kubectl set image deployment/microfrontend-search-product microfrontend-search-product=tasktrack.telekom.at/gucci-docker/microfrontend-search-product:' + ver + ' -n gucci; sleep 45; curl -X POST http://gucci-portal.k8s.sytoss.intra/portal-remote-app-registry/admin/ -H "Content-Type:application/x-www-form-urlencoded" -d "_url=http%3A%2F%2Fmicrofrontend-search-product.gucci%3A6101&_action=refresh"'
                                                echo "${command}"
                                                sh "sshpass -p ${PASSWORD} ssh -o StrictHostKeyChecking=no  ${USERNAME}@${k8s_host} 'bash -c \"${command} \" '"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        stage('Widget: Product Move'){
                            when{
                                expression{
                                    isReleaseNeeded(projects.find{it.key == "product-move" }?.value) == true
                                }
                            }
                            stages{
                                stage('Install deps'){
                                    steps{
                                        dir("product-move/"){
                                            sh 'git status'
                                            sh 'npm i'
                                        }
                                        
                                    }
                                }
                                stage('Build'){
                                    steps{
                                        dir("product-move/"){
                                            sh 'git status' //TODO Remove debug info
                                            sh 'npm run build'
                                            script{
                                                def set_version = "npm version " + base_build['baseVersion']
                                                echo "${set_version}"
                                                sh "${set_version}"
                                            }
                                        }
                                    }
                                }
                                stage('Publish'){
                                    steps{
                                        dir("product-move/"){
                                            withCredentials([usernamePassword(credentialsId: 'a1-bitbucket', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                                                sh 'git status' //TODO Remove debug info
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/product-move.git"
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/product-move.git --tags"
                                                sh "npm publish"
                                                sh "npm run docker-push-image"
                                            }
                                        }
                                    }
                                }
                            }
                            post{
                                always{
                                    sh 'docker container prune -f'
                                }
                                success{
                                    withCredentials([usernamePassword(credentialsId: '78448329-a67a-41f3-8ffb-76292d5457eb', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                                        dir("product-move/"){
                                            script{
                                                def ver = sh(returnStdout: true, script: "cat package.json | grep '\"version\":' | cut -d: -f2 | cut -d, -f1 | cut -c 3- | rev | cut -c 2- | rev").trim()
                                                def command = 'export KUBECONFIG=$HOME/.kube/admin.conf; kubectl set image deployment/microfrontend-product-move microfrontend-product-move=tasktrack.telekom.at/gucci-docker/microfrontend-product-move:' + ver + ' -n gucci; sleep 45; curl -X POST http://gucci-portal.k8s.sytoss.intra/portal-remote-app-registry/admin/ -H "Content-Type:application/x-www-form-urlencoded" -d "_url=http%3A%2F%2Fmicrofrontend-product-move.gucci%3A6102&_action=refresh"'
                                                echo "${command}"
                                                sh "sshpass -p ${PASSWORD} ssh -o StrictHostKeyChecking=no  ${USERNAME}@${k8s_host} 'bash -c \"${command} \" '"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        stage('Widget: Toolbar'){
                            when{
                                expression{
                                    isReleaseNeeded(projects.find{it.key == "microfrontend-hfhs-toolbar" }?.value) == true
                                    
                                }
                            }
                            stages{
                                stage('Install deps'){
                                    steps{
                                        dir("microfrontend-hfhs-toolbar/"){
                                            sh 'git status'
                                            sh 'npm i'
                                        }
                                    }
                                }
                                stage('Build'){
                                    steps{
                                        dir("microfrontend-hfhs-toolbar/"){
                                            sh 'git status' //TODO Remove debug info            
                                            sh 'npm run build'
                                            script{
                                                def set_version = "npm version " + base_build['baseVersion']
                                                echo "${set_version}"
                                                sh "${set_version}"
                                            }
                                        }
                                    }
                                }
                                stage('Publish'){
                                    steps{
                                        dir("microfrontend-hfhs-toolbar/"){
                                            withCredentials([usernamePassword(credentialsId: 'a1-bitbucket', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                                                sh 'git status' //TODO Remove debug info
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-toolbar.git"
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-toolbar.git --tags"
                                                sh "npm publish"
                                                sh "npm run docker-push-image"
                                            }
                                        }
                                    }
                                }
                            }
                            post{
                                always{
                                    sh 'docker container prune -f'
                                }
                                success{
                                    withCredentials([usernamePassword(credentialsId: '78448329-a67a-41f3-8ffb-76292d5457eb', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                                        dir("microfrontend-hfhs-toolbar/"){
                                            script{
                                                def ver = sh(returnStdout: true, script: "cat package.json | grep '\"version\":' | cut -d: -f2 | cut -d, -f1 | cut -c 3- | rev | cut -c 2- | rev").trim()
                                                def command = 'export KUBECONFIG=$HOME/.kube/admin.conf; kubectl set image deployment/microfrontend-hfhs-toolbar microfrontend-hfhs-toolbar=tasktrack.telekom.at/gucci-docker/microfrontend-hfhs-toolbar:' + ver + ' -n gucci; sleep 45; curl -X POST http://gucci-portal.k8s.sytoss.intra/portal-remote-app-registry/admin/ -H "Content-Type:application/x-www-form-urlencoded" -d "_url=http%3A%2F%2Fmicrofrontend-hfhs-toolbar.gucci%3A6110&_action=refresh"'
                                                echo "${command}"
                                                sh "sshpass -p ${PASSWORD} ssh -o StrictHostKeyChecking=no  ${USERNAME}@${k8s_host} 'bash -c \"${command} \" '"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        stage('Widget: Business Transaction History'){
                            when{
                                expression{
                                    isReleaseNeeded(projects.find{it.key == "microfrontend-hfhs-business-transaction-history" }?.value) == true
                                    
                                }
                            }
                            stages{
                                stage('Install deps'){
                                    steps{
                                        dir("microfrontend-hfhs-business-transaction-history/"){
                                            sh 'git status'
                                            sh 'npm i'
                                        }
                                    }
                                }
                                stage('Build'){
                                    steps{
                                        dir("microfrontend-hfhs-business-transaction-history/"){
                                            sh 'git status' //TODO Remove debug info
                                            sh 'npm run build'
                                            script{
                                                def set_version = "npm version " + base_build['baseVersion']
                                                echo "${set_version}"
                                                sh "${set_version}"
                                            }
                                        }
                                    }
                                }
                                stage('Publish'){
                                    steps{
                                        dir("microfrontend-hfhs-business-transaction-history/"){
                                            withCredentials([usernamePassword(credentialsId: 'a1-bitbucket', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                                                sh "git status" //TODO Remove debug info
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-business-transaction-history.git"
                                                sh "git push https://${USERNAME}:${PASSWORD}@tasktrack.telekom.at/bitbucket/scm/ccf/microfrontend-hfhs-business-transaction-history.git --tags"
                                                sh "npm publish"
                                                sh "npm run docker-push-image"
                                            }
                                        }
                                    }
                                }
                            }
                            post{
                                always{
                                    sh 'docker container prune -f'
                                }
                                success{
                                    withCredentials([usernamePassword(credentialsId: '78448329-a67a-41f3-8ffb-76292d5457eb', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                                        dir("microfrontend-hfhs-business-transaction-history/"){
                                            script{
                                                def ver = sh(returnStdout: true, script: "cat package.json | grep '\"version\":' | cut -d: -f2 | cut -d, -f1 | cut -c 3- | rev | cut -c 2- | rev").trim()
                                                def command = 'export KUBECONFIG=$HOME/.kube/admin.conf; kubectl set image -n gucci deployment/microfrontend-hfhs-business-transaction-history microfrontend-hfhs-business-transaction-history=tasktrack.telekom.at/gucci-docker/microfrontend-hfhs-business-transaction-history:' + ver + ' -n gucci; sleep 45; curl -X POST http://gucci-portal.k8s.sytoss.intra/portal-remote-app-registry/admin/ -H "Content-Type:application/x-www-form-urlencoded" -d "_url=http%3A%2F%2Fmicrofrontend-hfhs-business-transaction-history.gucci%3A6104&_action=refresh"'
                                                echo "${command}"
                                                sh "sshpass -p ${PASSWORD} ssh -o StrictHostKeyChecking=no  ${USERNAME}@${k8s_host} 'bash -c \"${command} \" '"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post{
        success{
            sh "docker rmi \$(docker images tasktrack.telekom.at/gucci-docker-local/microfrontend-hfhs-business-transaction-detail:latest | tail -n +2 | awk '{print \$3}') -f || true"
            sh "docker rmi \$(docker images tasktrack.telekom.at/gucci-docker-local/microfrontend-product-details:latest | tail -n +2 | awk '{print \$3}') -f || true"
            sh "docker rmi \$(docker images tasktrack.telekom.at/gucci-docker-local/microfrontend-search-product:latest | tail -n +2 | awk '{print \$3}') -f || true"
            sh "docker rmi \$(docker images tasktrack.telekom.at/gucci-docker-local/microfrontend-product-move:latest | tail -n +2 | awk '{print \$3}') -f || true"
            sh "docker rmi \$(docker images tasktrack.telekom.at/gucci-docker-local/microfrontend-hfhs-toolbar:latest | tail -n +2 | awk '{print \$3}') -f || true"
            sh "docker rmi \$(docker images tasktrack.telekom.at/gucci-docker-local/microfrontend-hfhs-business-transaction-history:latest | tail -n +2 | awk '{print \$3}') -f || true"
            sh "docker container prune -f"
        }
    }
}