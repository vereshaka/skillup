/*
Template of Jenkinsfile for building widgets
*/

def JENKINS_GIT_CREDENTIALS_ID = "8c90ce01-4736-4b5a-8661-ab6299330151"
def JENKINS_K8S_CREDENTIALS_ID = 'kubernetes-gucci-dev'

def JENKINS_NODE_JS_INSTALLATION_LABEL = 'node10.16.3'

def repo = "" // Address to repo without http/https prefix
def deployment_to_aqa = true //

String buildReport(String job_name, String trigger, String changes_list, String job_url, String build_number){
    Date date = new Date()
    String datePart = date.format("dd.MM.yyyy")
    String timePart = date.format("HH:mm")
    def build_time = timePart + " " + datePart

    def report = """
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title>HFHS developer build report</title>
  </head>
  <body style="font-family:system-ui,sans-serif;">
    <h1 align="center">HFHS developer build report</h1>
    <div class="body">
        <table border="0" width="100%">
        <tr>
            <td width="10%"></td>
        <td>
            <p>
            Build of ${job_name} has been failed:(<br/>
            For investigating of the problem you can check the information below:
            </p>
            <p>
            Widget name: ${job_name} <br/>
            Build number: <a href="${job_url}">#${build_number}</a> <br/>
            Cause: ${trigger} <br>
            List of the commits since last build:<br/>
            <ul>
            ${changes_list}
            </ul>
            </p>
            <p>
                Also you can view the attached log.
            </p>
        </td>
        <td width="10%"></td>
        </tr>
        </table>
    </div>
    <div class="footer">
        <hr/>
        <p style="font-size: 8pt; text-align:center"> This report was generated automatically at ${build_time}</p>
    </div>
  </body>
</html>
"""

return report
}


String getCommiterList(){
    def INFORM_ABOUT_FAILURE = 'grp.hfhs@sytoss.com'
    def excluded_user = ["dk_crm_gucci@a1.at", "dk_crm_gucci@a1.net"]
    def member_list = ((emailextrecipients([[$class: 'CulpritsRecipientProvider']])).split() - excluded_user).join(",")
    def copy_receivers = "cc:" + INFORM_ABOUT_FAILURE
    return member_list + "," + copy_receivers
}

pipeline{
    agent{
        node{
            label 'node'
        }
    }
    triggers{
        pollSCM('H/5 * * * 1-5')
    }
    stages{
        stage('Prepare'){
            steps{
                deleteDir()
                checkout([$class: 'GitSCM', branches: [[name: 'develop']], 
                        doGenerateSubmoduleConfigurations: false, 
                        extensions: [[$class: 'UserExclusion', excludedUsers: 'dk_crm_gucci']],
                        submoduleCfg: [], userRemoteConfigs: [[credentialsId: JENKINS_GIT_CREDENTIALS_ID, url: "https://${repo}"]]])
                sh 'git checkout develop'
                nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                    sh 'npm i'
                }
            }
        }
        stage('Build'){
            steps{               
                nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                    sh 'npm run build'
                }
                sh 'git checkout package-lock.json || true'
            }
        }
        stage('Sending tags and artifacts'){
            steps{
                withCredentials([usernamePassword(credentialsId: JENKINS_GIT_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    nodejs(JENKINS_NODE_JS_INSTALLATION_LABEL) {
                        sh "npm-cli-adduser --registry https://tasktrack.telekom.at/artifactory/api/npm/npm-repos --username ${USERNAME}  --password ${PASSWORD} --email ${USERNAME}@a1.at --scope @a1"
                        sh 'npm version prerelease'
                        sh "git push https://${USERNAME}:${PASSWORD}@${repo}"
                        sh "git push https://${USERNAME}:${PASSWORD}@${repo} --tags"
                        sh "npm publish"
                        sh "npm run docker-push-image"
                    }
                }
            }
        }
        stage('Deploying to Kubernetes'){
            parallel{
                stage('Deploy to DEV') {
                    environment {
                        NODE_ENV = 'development'
                        NAMESPACE = 'gucci-dev'
                        REPLICA_COUNT = '1'
                    }
                    steps {
                        script {
                            env.IMAGE_VERSION  = sh(returnStdout: true, script: "cat package.json | grep '\"version\":' | tr -d ',\"[:space:]' | cut -d: -f2").trim()
                        }
                        echo "Deploying version: ${IMAGE_VERSION} to DEV"
                        withKubeConfig([credentialsId: JENKINS_K8S_CREDENTIALS_ID]) {
                            sh 'envsubst < kubernetes/deployment.yml | kubectl apply -v=6 -f -'
                            sh 'envsubst < kubernetes/service.yml | kubectl apply -v=6 -f -'
                        }
                    }
                }
                stage('Deploy to AQA') {
                    when{
                        expression{
                            deployment_to_aqa == true
                        }
                    }
                    environment {
                        NODE_ENV = 'development'
                        NAMESPACE = 'hfhs-mock'
                        REPLICA_COUNT = '1'
                    }
                    steps {
                        script {
                            env.IMAGE_VERSION  = sh(returnStdout: true, script: "cat package.json | grep '\"version\":' | tr -d ',\"[:space:]' | cut -d: -f2").trim()
                        }
                        echo "Deploying version: ${IMAGE_VERSION} to AQA"
                        withKubeConfig([credentialsId: JENKINS_K8S_CREDENTIALS_ID]) {
                            sh 'envsubst < kubernetes/deployment.yml | kubectl apply -v=6 -f -'
                            sh 'envsubst < kubernetes/service.yml | kubectl apply -v=6 -f -'
                        }
                    }
                }
            }
        }
    }
    post{
        failure {
            script {
                emailext to: getCommiterList(),
                         subject: "Build failed in Jenkins: ${JOB_NAME} #${BUILD_NUMBER}",
                         body: buildReport('${JOB_NAME}', '${BUILD_CAUSE}', '${CHANGES_SINCE_LAST_BUILD,format="<li>[%d] %a - <i>%m</i></li>"}', '${BUILD_URL}', '${BUILD_NUMBER}'),
                         attachLog: true,
                         mimeType: 'text/html'
            }
        }
        fixed{
            emailext to: 'grp.hfhs@sytoss.com',
                     subject: "Jenkins build is back to normal: ${JOB_NAME} #${BUILD_NUMBER}",
                     body: "${JOB_NAME} has been restored. Have a nice day!",
                     mimeType: 'text/plain'
        }
    }
}