/*
Template of Jenkinsfile for building widgets

Build node requirements:
* Docker (user must have access to Docker CLI without 'sudo')
* NodeJS (it was tested on LTS version)
* sshpass

Jenkins checks updates in branch 'develop' (exclude Jenkins user) every 5 minutes every day except weekends
*/

def repo = "" //URL of repo
def image_name = "" //name of Docker image 
def k8s_host = "192.168.20.70" //Set your own IP or FQDN of Kubernetes master
def portal_host = "http://gucci-portal.k8s.sytoss.intra/portal-remote-app-registry/admin/" //Set your own IP or FQDN of GUCCI portal
def app_port = "" //port that used by widget

pipeline{
    agent{
        node{
            label 'node'
        }
    }
    triggers{
        pollSCM('H/5 * * * 1-5')
    }
    stages{
        stage('Prepare'){
            steps{
                sh 'docker version && node -v && npm -v'
                sh 'apt list | grep sshpass'
                deleteDir()
                checkout([$class: 'GitSCM', branches: [[name: 'develop']], 
                        doGenerateSubmoduleConfigurations: false, 
                        extensions: [[$class: 'UserExclusion', excludedUsers: 'Jenkins']], 
                        submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'a1-bitbucket', url: "https://${repo}"]]])                
                sh 'git checkout develop && git status'
                sh 'npm i'
            }
        }
        stage('Build'){
            steps{
                sh 'git status'    
                sh 'npm run build'
                sh 'git checkout package-lock.json'
            }
        }
        stage('Publish'){
            steps{
                sh 'git status'
                withCredentials([usernamePassword(credentialsId: 'a1-bitbucket', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh 'npm version prerelease'
                    sh "git push https://${USERNAME}:${PASSWORD}@${repo}"
                    sh "git push https://${USERNAME}:${PASSWORD}@${repo} --tags"
                    sh "npm publish"
                    sh "npm run docker-push-image"
                }
            }
        }
    }
    post{
        always{
            sh 'docker container prune -f'
        }
        success{
            withEnv(["img=${image_name}"]) {
                    sh "docker rmi \$(docker images tasktrack.telekom.at/gucci-docker-local/\$img:latest | tail -n +2 | awk '{print \$3}') -f"
                    sh "docker container prune -f"
            }
            //set your own ID of SSH credentials
            withCredentials([usernamePassword(credentialsId: '78448329-a67a-41f3-8ffb-76292d5457eb', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                script{
                    def ver = sh(returnStdout: true, script: "cat package.json | grep '\"version\":' | cut -d: -f2 | cut -d, -f1 | cut -c 3- | rev | cut -c 2- | rev").trim()
                    def command = 'export KUBECONFIG=$HOME/.kube/admin.conf; kubectl set image deployment/' + image_name + ' ' + image_name + '=tasktrack.telekom.at/gucci-docker/' + image_name + ':' + ver + ' -n gucci; sleep 60; curl -X POST ' + portal_host + ' -H "Content-Type:application/x-www-form-urlencoded" -d "_url=http%3A%2F%2F' + image_name + '.gucci%3A' + app_port + '&_action=refresh"'
                    echo "${command}"
                    sh "sshpass -p ${PASSWORD} ssh -o StrictHostKeyChecking=no  ${USERNAME}@${k8s_host} 'bash -c \"${command} \" '"
                }
            }
        }
    }
}